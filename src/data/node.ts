export const nodejs = {
  basics: {
    queries: [
      {
        type: 'text',
        name: 'what',
        message: 'What is node?',
        initial: 'node is a ',
        answer: 'js runtime environment that executes javascript code outside a web browser.',
      },
      {
        type: 'text',
        name: 'who',
        message: 'Who created node?',
        initial: 'Enter full name...',
        answer: 'Ryan Dahl',
      },
      {
        type: 'text',
        name: 'when',
        message: 'What year was node released?',
        initial: 'Enter year...',
        answer: '2009',
      },
      {
        type: 'text',
        name: 'difference',
        message: 'What is different about node?',
        initial: 'node is a ',
        answer:
          'long-running, single-threaded process with non-blocking capabilities via the event loop',
      },
      {
        type: 'text',
        name: 'usage',
        message: 'What is node mainly used for?',
        initial: 'Node is used to create...',
        answer: 'web servers, apis, command line interface tools, and task automation',
      },
      {
        type: 'text',
        name: 'subjects',
        message: 'What are the top 3 node subjects to master?',
        initial: 'The top 3 subjects to master are...',
        answer: 'event loop, non-blocking code, and error handling',
      },
    ],
  },
  eventloop: {
    queries: [
      {
        type: 'text',
        name: 'loop',
        message: 'What is a loop?',
        initial: 'A loop is a ...',
        answer: 'control structure to handle conditional logic',
      },
      {
        type: 'text',
        name: 'event-loop',
        message: 'What is the event loop in node?',
        initial: 'The event loop is ...',
        answer:
          'the foundation for all I/O which tracks and executes code via events in a non-blocking way',
      },
      {
        type: 'text',
        name: 'event-loop-how',
        message: 'How is the event loop created?',
        initial: 'When node starts it...',
        answer:
          'initializes the event loop, processes the input script, and begins processing the event loop',
      },
      {
        type: 'text',
        name: 'event-loop-action',
        message: 'What does the event loop do?',
        initial: 'The event loop ...',
        answer: 'offloads operations to the system kernel whenever possible',
      },
      {
        type: 'text',
        name: 'structure',
        message: 'How is the event loop structured?',
        initial: 'The event loop is structured as ...',
        answer: 'a set of phases that are evaluated in order during a tick',
      },
      {
        type: 'text',
        name: 'tick',
        message: 'What is a tick?',
        initial: 'A tick is ...',
        answer: 'one iteration of the event loop',
      },
      {
        type: 'text',
        name: 'tick-action',
        message: 'What happens on a tick?',
        initial: 'With each tick ...',
        answer:
          'if an event has been queued, the event loop removes it from the queue and the callback function gets added to the V8 call stack to be executed',
      },
      {
        type: 'text',
        name: 'v8',
        message: 'What is v8?',
        initial: 'V8 is an ...',
        answer: 'open source high-performance JavaScript and WebAssembly engine',
      },
      {
        type: 'text',
        name: 'call-stack',
        message: 'What is a call stack?',
        initial: 'A call stack is ...',
        answer: 'a list of function calls that get output to the stack trace when an error occurs',
      },
      {
        type: 'text',
        name: 'phases',
        message: 'What are the 6 phases of the event loop?',
        initial: 'The 6 phases are ...',
        answer: 'timers, pending callbacks, idle/prepare, poll, check, close callbacks',
      },
      {
        type: 'text',
        name: 'phase',
        message: 'What happens when the event loop enters a phase?',
        initial: 'The event loop will ...',
        answer:
          'perform any operations specific to that phase, execute callbacks in that phase&amp;s queue until the queue has been exhausted or the maximum number of callbacks has executed',
      },
      {
        type: 'text',
        name: 'queue',
        message:
          'When the queue has been exhausted or the callback limit is reached, what does the event loop do next?',
        initial: 'The event loop will ...',
        answer: 'move to the next phase',
      },
      {
        type: 'text',
        name: 'timers',
        message: 'What does the event loop do during the timers phase?',
        initial: 'During the timer phase, the event loop ...',
        answer: 'executes callbacks scheduled by setTimeout() and setInterval()',
      },
      {
        type: 'text',
        name: 'pending-callbacks',
        message: 'What does the event loop do during the pending callbacks phase?',
        initial: 'During the pending callbacks phase, the event loop ...',
        answer: 'executes I/O callbacks like TCP errors',
      },
      {
        type: 'text',
        name: 'idle-prepare',
        message: 'What does the event loop do during idle/prepare?',
        initial: 'During the pending callbacks phase, the event loop ...',
        answer: 'does nothing as this phase is only used internally',
      },
      {
        type: 'text',
        name: 'poll',
        message: 'What does the event loop do during the poll phase?',
        initial: 'During the polls phase, the event loop ...',
        answer: 'retrieve new I/O events and execute I/O related callbacks',
      },
      {
        type: 'text',
        name: 'poll-defer',
        message: 'What callback execution does the poll phase defer to other phases?',
        initial: 'The polls phase defers callback exection for ...',
        answer: 'close, those scheduled by timers, and setImmediate()',
      },
      {
        type: 'text',
        name: 'check',
        message: 'What does the event loop do during the check phase?',
        initial: 'During the check phase the event loop ...',
        answer: 'executes setImmediate() callbacks',
      },
      {
        type: 'text',
        name: 'close',
        message: 'What does the event loop do during the close phase?',
        initial: 'During the close phase the event loop ...',
        answer: 'executes some close callbacks',
      },
      {
        type: 'text',
        name: 'event-loop-blocking',
        message: 'When does the event looped get blocked by design?',
        initial: 'The event loop gets blocked by design...',
        answer: 'during the poll phase',
      },
      {
        type: 'text',
        name: 'poll-blocking',
        message: 'How long is execution blocked during the poll phase?',
        initial: 'The time poll blocks for I/O...',
        answer: 'is system dependent',
      },
      {
        type: 'text',
        name: 'libuv',
        message: 'What&amp;s the name of the library that handles I/O polling?',
        initial: 'The name of the library that handles polling is...',
        answer: 'libuv',
      },
      {
        type: 'text',
        name: 'libuv-what',
        message: 'What is libuv?',
        initial: 'libuv is a...',
        answer:
          'C library that implements the node event loop and all of the asynchronous behaviors of the platform',
      },
    ],
  },
};
